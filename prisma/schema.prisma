// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INFO
  USER
}

enum ContainerActivityType {
  CREATED
  STARTED
  RESTARTED
  STOPPED
  DOMAIN_UPDATE
  MEMORY_UPDATE
  CPU_UPDATE
}

enum NotificationType {
  CONTAINER_MEMORY
  CONTAINER_CPU
  CONTAINER_DELETE
  OTHER
}

enum NotificationState {
  CREATED
  READ
  PROCESSED
  CANCELED
}

enum ContainerState {
  RUNNING
  STOPPED
  RESTARTING
  CREATED
  PAUSED
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  nickname      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String
  roles         Role[]    @default([USER])

  containers             Container[]
  accounts               Account[]
  sessions               Session[]
  ContainerNotifications Notification[]
}

model Container {
  id        String         @id @default(cuid())
  name      String
  domain    String?
  state     ContainerState @default(CREATED)
  hostPort  Int
  memory    Float          @default(0.5)
  cpu       Float          @default(0.5)
  createdAt DateTime       @default(now())
  startedAt DateTime?
  updatedAt DateTime       @updatedAt

  users                  User[]
  containerActivities    ContainerActivity[]
  containerNotifications Notification[]
}

model ContainerActivity {
  id          String   @id @default(cuid())
  containerId String
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  type      ContainerActivityType
  container Container             @relation(fields: [containerId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  containerId String
  message     String
  contact     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  state     NotificationState @default(CREATED)
  type      NotificationType
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  container Container         @relation(fields: [containerId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
